import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load m√¥ h√¨nh v√† preprocessor
model = joblib.load("xgb_model.pkl")
preprocessor = joblib.load("preprocessor.pkl")

st.title("üìä D·ª± ƒëo√°n ph√™ duy·ªát kho·∫£n vay")

st.header("üîç Nh·∫≠p th√¥ng tin kh√°ch h√†ng")

# C√°c th√¥ng tin ƒë·∫ßu v√†o
credit_policy = st.selectbox("C√≥ tu√¢n th·ªß ch√≠nh s√°ch t√≠n d·ª•ng?", [0, 1], key="credit_policy")
purpose = st.selectbox("M·ª•c ƒë√≠ch vay", [
    'credit_card', 'debt_consolidation', 'educational',
    'home_improvement', 'major_purchase', 'small_business'
], key="purpose")
int_rate = st.number_input("L√£i su·∫•t (int.rate)", min_value=0.0, step=0.01)
installment = st.number_input("Kho·∫£n tr·∫£ g√≥p h√†ng th√°ng", min_value=0.0, step=1.0)
log_annual_inc = st.number_input("log(Thu nh·∫≠p h√†ng nƒÉm)", min_value=0.0, step=0.1)
dti = st.number_input("T·ª∑ l·ªá n·ª£ tr√™n thu nh·∫≠p (dti)", min_value=0.0, step=0.1)
fico = st.slider("ƒêi·ªÉm FICO", 300, 850, step=1)
days_with_cr_line = st.number_input("S·ªë ng√†y c√≥ l·ªãch s·ª≠ t√≠n d·ª•ng", min_value=0.0)
revol_bal = st.number_input("S·ªë d∆∞ n·ª£ quay v√≤ng (revol_bal)", min_value=0.0)
revol_util = st.number_input("T·ª∑ l·ªá s·ª≠ d·ª•ng t√≠n d·ª•ng (revol_util)", min_value=0.0, max_value=100.0)
inq_last_6mths = st.number_input("S·ªë l·∫ßn h·ªèi t√≠n d·ª•ng 6 th√°ng", min_value=0, step=1)
delinq_2yrs = st.number_input("S·ªë l·∫ßn tr·ªÖ h·∫°n 2 nƒÉm", min_value=0, step=1)
pub_rec = st.number_input("S·ªë b·∫£n ghi c√¥ng khai", min_value=0, step=1)

# N√∫t submit
if st.button("üöÄ D·ª± ƒëo√°n k·∫øt qu·∫£"):
    # L·∫•y gi√° tr·ªã m·ª•c ƒë√≠ch vay t·ª´ dropdown
    purpose = st.selectbox("M·ª•c ƒë√≠ch vay", [
        'credit_card', 'debt_consolidation', 'educational',
        'home_improvement', 'major_purchase', 'small_business'
    ])

    # Chuy·ªÉn th√†nh DataFrame
    input_dict = {
        'credit.policy': [credit_policy],
        'int.rate': [int_rate],
        'installment': [installment],
        'log.annual.inc': [log_annual_inc],
        'dti': [dti],
        'fico': [fico],
        'days.with.cr.line': [days_with_cr_line],
        'revol.bal': [revol_bal],
        'revol.util': [revol_util],
        'inq.last.6mths': [inq_last_6mths],
        'delinq.2yrs': [delinq_2yrs],
        'pub.rec': [pub_rec],
        'purpose_credit_card': [1 if purpose == 'credit_card' else 0],
        'purpose_debt_consolidation': [1 if purpose == 'debt_consolidation' else 0],
        'purpose_educational': [1 if purpose == 'educational' else 0],
        'purpose_home_improvement': [1 if purpose == 'home_improvement' else 0],
        'purpose_major_purchase': [1 if purpose == 'major_purchase' else 0],
        'purpose_small_business': [1 if purpose == 'small_business' else 0],
    }
    new_df = pd.DataFrame(input_dict)

    # T·∫°o feature ph·ª•
    new_df["installment_income_ratio"] = new_df["installment"] / np.exp(new_df["log.annual.inc"])
    new_df["fico_squared"] = new_df["fico"] ** 2
    new_df["dti_squared"] = new_df["dti"] ** 2
    new_df["total_debt"] = new_df["revol.bal"] + new_df["installment"] * 12  # ƒê√É S·ª¨A C√îNG TH·ª®C
    new_df["int.rate_dti"] = new_df["int.rate"] * new_df["dti"]
    new_df["log.annual.inc_installment"] = new_df["log.annual.inc"] * new_df["installment"]

    # Ti·ªÅn x·ª≠ l√Ω
    X_final = preprocessor.transform(new_df)

    # D·ª± ƒëo√°n
    prob = model.predict_proba(X_final)[0, 1]
    approved = prob < 0.2

    st.subheader("üéØ K·∫øt qu·∫£:")
    st.write(f"X√°c su·∫•t v·ª° n·ª£: **{prob:.2%}**")
    if approved:
        st.success("‚úÖ Kho·∫£n vay ƒë∆∞·ª£c PH√ä DUY·ªÜT")
    else:
        st.error("‚ùå Kho·∫£n vay KH√îNG ƒë∆∞·ª£c ph√™ duy·ªát")
